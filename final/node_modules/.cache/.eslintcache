[{"C:\\vscode\\webfinalproject\\final\\final\\final\\src\\index.js":"1","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\App.js":"2","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\reportWebVitals.js":"3","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\axios.js":"4","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Add.js":"5","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\MyCalendar.js":"6","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Sign_in.js":"7","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\PieChart.js":"8","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Property.js":"9","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Budget.js":"10","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Map\\Map.js":"11","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Component\\Pins.js":"12"},{"size":602,"mtime":1642429363955,"results":"13","hashOfConfig":"14"},{"size":5656,"mtime":1642429884362,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1642429363956,"results":"16","hashOfConfig":"14"},{"size":179,"mtime":1642439090116,"results":"17","hashOfConfig":"14"},{"size":8783,"mtime":1642429363941,"results":"18","hashOfConfig":"14"},{"size":6591,"mtime":1642438596124,"results":"19","hashOfConfig":"14"},{"size":8591,"mtime":1642438586839,"results":"20","hashOfConfig":"14"},{"size":4386,"mtime":1642438563984,"results":"21","hashOfConfig":"14"},{"size":3124,"mtime":1642429363946,"results":"22","hashOfConfig":"14"},{"size":4472,"mtime":1642429363942,"results":"23","hashOfConfig":"14"},{"size":4158,"mtime":1642438523202,"results":"24","hashOfConfig":"14"},{"size":4064,"mtime":1642438927590,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yjh2xq",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"C:\\vscode\\webfinalproject\\final\\final\\final\\src\\index.js",[],"C:\\vscode\\webfinalproject\\final\\final\\final\\src\\App.js",["59","60","61","62","63","64","65","66"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Routes, Route, Navigate, NavLink, useNavigate } from \"react-router-dom\";\r\nimport MyCalendar from './Containers/MyCalendar.js';\r\nimport Add from './Containers/Add.js';\r\nimport Signin from './Containers/Sign_in.js';\r\nimport Graph from './Containers/PieChart.js';\r\nimport Property from './Containers/Property.js';\r\nimport { Layout, Menu, Typography } from 'antd';\r\nimport {\r\n  BarChartOutlined,\r\n  SettingOutlined,\r\n  EnvironmentOutlined,\r\n  InsertRowAboveOutlined,\r\n  DollarOutlined,\r\n  ScheduleOutlined,\r\n  ImportOutlined\r\n} from '@ant-design/icons';\r\nimport \"./Css/Menu.css\"\r\nimport axios from './axios.js'\r\nimport Budget from './Containers/Budget.js';\r\nimport Map from './Containers/Map/Map.js';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\nconst { Title, Text } = Typography;\r\n\r\nlet LOCALSTORAGE_KEY = \"\";\r\nlet LOCALSTORAGE_KEY2 = \"false\";\r\nfunction App() {\r\n  const savedUsername = localStorage.getItem(LOCALSTORAGE_KEY);\r\n  const savedLogin = localStorage.getItem(LOCALSTORAGE_KEY2);\r\n  const [login, setLogin] = useState(savedLogin);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [username, setUsername] = useState(savedUsername);\r\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\r\n  console.log(typeof (login));\r\n  let navigate = useNavigate();\r\n  const setvalue = () => {\r\n    localStorage.setItem(LOCALSTORAGE_KEY, username);\r\n    localStorage.setItem(LOCALSTORAGE_KEY2, login);\r\n  }\r\n  useEffect(() => {\r\n    if (login === \"true\") {\r\n      setvalue()\r\n      console.log(login)\r\n    }\r\n    console.log(\"test\")\r\n  }, [login]);\r\n  const handleLogout = () => {\r\n    localStorage.setItem(LOCALSTORAGE_KEY, \"\");\r\n    localStorage.setItem(LOCALSTORAGE_KEY2, \"false\");\r\n    setUsername(\"\")\r\n    setLogin((login) => { return login = \"false\" })\r\n    navigate('/signin')\r\n  }\r\n  console.log(login)\r\n  return (\r\n    (login === \"true\" ?\r\n      <div>\r\n        <Layout>\r\n          <Sider style={{\r\n            overflow: 'auto',\r\n            height: '100vh',\r\n            position: 'fixed',\r\n            left: 0,\r\n          }}>\r\n            <Header style={{ padding: \"0 0\" }}>\r\n              <Title level={3} style={{ marginTop: \"0.5em\", marginLeft: \"0.5em\", color: \"white\" }}>{username}</Title>\r\n            </Header>\r\n            <Menu theme=\"dark\" mode=\"inline\">\r\n              <Menu.Item key='1' style={{ height: '100px', fontSize: '40px', margin: '0px', background: '#971d1d' }}>\r\n                <NavLink to=\"/add\" />\r\n                +\r\n              </Menu.Item>\r\n              <Menu.Item key='2' style={{ height: '60px', fontSize: '20px', marginTop: '0px' }} icon={<InsertRowAboveOutlined style={{ fontSize: '110%' }} />}>\r\n                <NavLink to=\"/calendar\" />\r\n                ??��??\r\n              </Menu.Item>\r\n              <Menu.Item key='3' style={{ height: '60px', fontSize: '20px' }} icon={<BarChartOutlined style={{ fontSize: '110%' }} />}>\r\n                <NavLink to=\"/graph\" />\r\n                ???�?\r\n              </Menu.Item>\r\n              <Menu.Item key='4' style={{ height: '60px', fontSize: '20px' }} icon={<DollarOutlined style={{ fontSize: '110%' }} />}>\r\n                <NavLink to=\"/property\" />\r\n                �????\r\n              </Menu.Item>\r\n              <Menu.Item key='5' style={{ height: '60px', fontSize: '20px' }} icon={<EnvironmentOutlined style={{ fontSize: '110%' }} />}>\r\n                <NavLink to=\"/map\" />\r\n                ??��??\r\n              </Menu.Item> \r\n              {/* <Menu.Item key='6' style={{ height: '60px', fontSize: '20px' }} icon={<ScheduleOutlined style={{ fontSize: '110%' }} />}>\r\n                <NavLink to=\"/budget\" />\r\n                ???�??\r\n              </Menu.Item> */}\r\n              {/* <Menu.Item key='7' style={{ height: '60px', fontSize: '20px' }} icon={<SettingOutlined style={{ fontSize: '110%' }} />}>\r\n                <NavLink to=\"/setting\" />\r\n                設�??\r\n              </Menu.Item> */}\r\n              <SubMenu key=\"sub1\" title=\"??��??\" style={{ height: '60px', fontSize: '20px' }} icon={<ImportOutlined style={{ fontSize: '110%' }} />}>\r\n                <Menu.Item key=\"??��??\" onClick={() => handleLogout()}>確�??</Menu.Item>\r\n              </SubMenu>\r\n            </Menu>\r\n          </Sider>\r\n          <Layout style={{ marginLeft: 200 }}>\r\n            <Content style={{ margin: '24px 16px 0', overflow: 'initial', textAlign: 'center' }}>\r\n              <Routes>\r\n                <Route exact path=\"/calendar\" element={<MyCalendar username={username} />} />\r\n                <Route exact path=\"/add\" element={<Add username={username} />} />\r\n                <Route exact path=\"/graph\" element={<Graph username={username} />} />\r\n                <Route exact path=\"/property\" element={<Property username={username} />} />\r\n                {/* <Route exact path=\"/budget\" element={<Budget username={username} />} /> */}\r\n                <Route exact path=\"/map\" element={<Map username={username}/>} />\r\n                <Route path=\"/\" element={<Navigate to=\"/calendar\" />} />\r\n              </Routes>\r\n            </Content>\r\n          </Layout>\r\n        </Layout>\r\n      </div>\r\n      :\r\n      <div>\r\n        <Routes>\r\n          <Route exact path=\"/signin\" element={<Signin login2={login} Login={setLogin} password={password} username={username} confirmpassword={confirmpassword} setPassword={setPassword} setConfirmpassword={setConfirmpassword} setUsername={setUsername} />} />\r\n          <Route path=\"/\" element={<Navigate to=\"/signin\" />} />\r\n        </Routes>\r\n      </div>\r\n    ))\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\reportWebVitals.js",[],"C:\\vscode\\webfinalproject\\final\\final\\final\\src\\axios.js",[],"C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Add.js",["67","68","69"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport { Tabs, Button, Space, Input, Typography, message, DatePicker, Modal } from 'antd';\r\nimport '../Css/Add.css';\r\nimport axios from '../axios.js'\r\nimport moment from \"moment\";\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Search } = Input;\r\nconst { Title } = Typography;\r\n\r\n\r\nconst Add = ({ username }) => {\r\n    const [Textfield, setTextfield] = useState(0);\r\n    const [Content, setContent] = useState('');\r\n    const [Type, setType] = useState(\"\");\r\n    const [AddType, setAddtype] = useState(\"\");\r\n    const [Status, setStatus] = useState(\"支出\");\r\n    const [Date, setDate] = useState(moment());\r\n    const [address,setAddress] = useState(\"\");\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    let navigate = useNavigate();\r\n\r\n    // console.log(Date);\r\n    const handleTab = (key) => {\r\n        setTextfield(0);\r\n        setStatus(key);\r\n    }\r\n\r\n    const handleCost = async (cost) => {\r\n        const date_Y = Date.format('YYYY');\r\n        const date_YM = Date.format('YYYY-MM');\r\n        const date = Date.format('YYYY-MM-DD');\r\n        var r = /^[0-9]*[1-9][0-9]*$/;\r\n        if (cost === \"\") {\r\n            message.error({\r\n                content: \"Please enter the number\"\r\n            })\r\n        }\r\n        else if (r.test(cost)) {\r\n            console.log({\r\n                username: username,\r\n                date_Y: date_Y,\r\n                date_YM: date_YM,\r\n                date: date,\r\n                record: {\r\n                    status: Status,\r\n                    type: Type,\r\n                    content: Content,\r\n                    cost: cost,\r\n                    address\r\n                }\r\n            })\r\n            const {\r\n                data: { Message },\r\n            } = await axios.post('/api/AddRecord', {\r\n                username: username,\r\n                date_Y: date_Y,\r\n                date_YM: date_YM,\r\n                date: date,\r\n                record: {\r\n                    status: Status,\r\n                    type: Type,\r\n                    content: Content,\r\n                    cost: cost,\r\n                    address\r\n                }\r\n            });\r\n            message.success({\r\n                content: Message\r\n            })\r\n            navigate(\"/calendar\");\r\n        }\r\n        else {\r\n            message.error({\r\n                content: \"Please enter the number\"\r\n            })\r\n        }\r\n    }\r\n    const handleTextfield = (event) => {\r\n        setTextfield(1);\r\n        // console.log(event.target.innerText);\r\n        setType(event.target.innerText);\r\n    }\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        if (AddType !== \"\") {\r\n            setTextfield(1);\r\n            setIsModalVisible(false);\r\n            setType(AddType);\r\n            message.success({\r\n                content: 'Add success'\r\n            })\r\n        }\r\n        else {\r\n            message.error({\r\n                content: 'Input value is empty'\r\n            })\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const outcome = [\"飲食\", \"交通\", \"日常用品\", \"服飾\", \"電話網路\", \"水電瓦斯\", \"娛樂\", \"教育\", \"保險\", \"稅金\"]\r\n    const income = [\"工資\", \"獎金\", \"股票\", \"彩券\"]\r\n\r\n    return (\r\n        <Tabs defaultActiveKey=\"支出\" centered onTabClick={(key) => handleTab(key)}>\r\n            <TabPane tab=\"支出\" key=\"支出\">\r\n                <Space size={[20, 20]} wrap align='center'>\r\n                    {new Array(10).fill(null).map((_, index) => (\r\n                        <Button shape='round' key={index} style={{ height: '75px', width: '75px', padding: '4px 4px' }}\r\n                            onClick={(event) => handleTextfield(event)}\r\n                        >{outcome[index]}\r\n                        </Button>\r\n                    ))}\r\n                    <Button shape='round' key={'NEW'} style={{ height: '75px', width: '75px', padding: '4px 4px', fontSize: '25px' }}\r\n                        onClick={showModal}\r\n                    >+\r\n                    </Button>\r\n                    <Modal title=\"新增項目\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <Input\r\n                            value={AddType}\r\n                            size='large'\r\n                            placeholder=\"請輸入新項目\"\r\n                            onChange={(e) => { setAddtype(e.target.value) }}\r\n                        />\r\n                    </Modal>\r\n                </Space>\r\n                <div style={{ margin: \"5%\" }}>\r\n                    {Textfield ? (<>\r\n                        <Title level={2}><DatePicker size='large' defaultValue={Date} onChange={(date) => setDate(date)} allowClear={false} /></Title>\r\n                        <Title level={2}>{Date.format('YYYY-MM-DD')}</Title>\r\n                        <Title level={2} style={{ marginBottom: '10px' }}>{Type}</Title>\r\n                        <Input placeholder=\"備註\"\r\n                            allowClear\r\n                            size=\"large\"\r\n                            style={{ width: '60%', marginTop: '20px' }}\r\n                            value={Content}\r\n                            onChange={(e) => setContent(e.target.value)}\r\n                        />\r\n                        <Title level={2}>\r\n                            <Input placeholder=\"地址\"\r\n                            allowClear\r\n                            size=\"large\"\r\n                            style={{ width: '60%', marginTop: '20px' }}\r\n                            value={address}\r\n                            onChange={(e) =>setAddress(e.target.value)}\r\n                            /> </Title>\r\n                        <Search\r\n                            placeholder=\"請輸入金額\"\r\n                            allowClear\r\n                            enterButton=\"確認\"\r\n                            size=\"large\"\r\n                            style={{ width: '50%', marginTop: '20px' }}\r\n                            onSearch={handleCost}\r\n                        />\r\n                    </>) : (<></>)\r\n                    }\r\n                </div>\r\n            </TabPane>\r\n            <TabPane tab=\"收入\" key=\"收入\">\r\n                <Space size={[20, 20]} wrap align='center'>\r\n                    {new Array(4).fill(null).map((_, index) => (\r\n                        <Button shape='round' key={index} style={{ height: '75px', width: '75px', padding: '4px 4px' }}\r\n                            onClick={(event) => handleTextfield(event)}\r\n                        >{income[index]}\r\n                        </Button>\r\n                    ))}\r\n                    <Button shape='round' key={\"NEW\"} style={{ height: '75px', width: '75px', padding: '4px 4px', fontSize: '25px' }}\r\n                        onClick={showModal}\r\n                    >+\r\n                    </Button>\r\n                    <Modal title=\"新增項目\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <Input\r\n                            value={AddType}\r\n                            size='large'\r\n                            placeholder=\"請輸入新項目\"\r\n                            onChange={(e) => { setAddtype(e.target.value) }}\r\n                        />\r\n                    </Modal>\r\n                </Space>\r\n                <div style={{ margin: \"5%\" }}>\r\n                    {Textfield ? (<>\r\n                        <Title level={2}><DatePicker size='large' defaultValue={Date} onChange={(date) => setDate(date)} allowClear={false} /></Title>\r\n                        <Title level={2}>{Date.format('YYYY-MM-DD')}</Title>\r\n                        <Title level={2}>{Type}</Title>\r\n                        <Input placeholder=\"備註\"\r\n                            allowClear\r\n                            size=\"large\"\r\n                            style={{ width: '60%', marginTop: '20px' }}\r\n                            value={Content}\r\n                            onChange={(e) => setContent(e.target.value)}\r\n                        />\r\n                        <Search\r\n                            placeholder=\"請輸入金額\"\r\n                            allowClear\r\n                            enterButton=\"確認\"\r\n                            size=\"large\"\r\n                            style={{ width: '50%', marginTop: '20px' }}\r\n                            onSearch={handleCost}\r\n                        />\r\n                    </>) : (<></>)\r\n                    }\r\n                </div>\r\n            </TabPane>\r\n        </Tabs>\r\n    )\r\n};\r\n\r\nexport default Add;","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\MyCalendar.js",["70","71","72","73","74"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Modal, Calendar, Typography, Tabs, Table, Popconfirm, message } from \"antd\";\r\nimport axios from '../axios.js'\r\nimport moment from \"moment\";\r\nimport \"../Css/MyCalendar.css\";\r\nimport { css } from \"@emotion/react\";\r\nimport RingLoader from 'react-spinners/RingLoader.js'\r\nconst { Title, Text } = Typography;\r\nconst { TabPane } = Tabs;\r\n\r\nconst override = css`\r\n  display: flex;\r\n  border-color: #971d1d;\r\n`;\r\n\r\nconst MyCalendar = ({ username }) => {\r\n  const [ModalVisible, setModalVisible] = useState(false);\r\n  const [SelectDate, setSelectDate] = useState(\"\");\r\n  const [curRecord, setCurrentRecord] = useState([]);\r\n  const [GridMode, setGridMode] = useState(\"month\");\r\n  let Change = false;\r\n  const columns = [\r\n    {\r\n      title: '�????',\r\n      dataIndex: 'type',\r\n    }, {\r\n      title: '???�?(???)',\r\n      dataIndex: 'cost',\r\n    }, {\r\n      title: '???�?',\r\n      dataIndex: 'content',\r\n    }, {\r\n      title: '',\r\n      dataIndex: '',\r\n      render: (text, record, index) => {\r\n        return (\r\n          curRecord.length > 0 ?\r\n            (\r\n              <Popconfirm title=\"Sure to delete?\" onConfirm={() => onDelete(record._id)}>\r\n                <a href=\"#\" color=\"red\">Delete</a>\r\n              </Popconfirm>\r\n            ) : null\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const GetRecord = async () => {\r\n    const { data: { records } } = await axios.get('/api/GetUserInformation', {\r\n      params: {\r\n        username,\r\n      },\r\n    });\r\n    setCurrentRecord(records);\r\n    //console.log(records);\r\n  };\r\n\r\n  const onDelete = async (index) => {\r\n    // console.log(username, curRecord[index].date, curRecord[index].status, curRecord[index].content, curRecord[index].type);\r\n    const { data: { Message, NewRecords } } = await axios.post('/api/DeleteRecord', {\r\n      username: username,\r\n      _id: index,\r\n    });\r\n    setCurrentRecord(NewRecords);\r\n    //console.log(curRecord);\r\n    message.success({\r\n      content: Message\r\n    })\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    GetRecord();\r\n  }, []);\r\n\r\n  function onPanelChange(value, mode) {\r\n    // console.log(2);\r\n    Change = true;\r\n    if (mode === \"year\")\r\n      setGridMode(\"year\");\r\n    else\r\n      setGridMode(\"month\");\r\n  }\r\n\r\n  const showModal = (value) => {\r\n    // console.log(1);\r\n    Change = !Change;\r\n    if (GridMode === \"month\" && Change === true) {\r\n      Change = !Change;\r\n      const DATE = value.format('YYYY-MM-DD');\r\n      setSelectDate(DATE);\r\n      //console.log(SelectDate);\r\n      setModalVisible(true);\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setModalVisible(false);\r\n  };\r\n\r\n  function createTable(status) {\r\n    let arr = curRecord.filter((x) => { return x.date === SelectDate && x.status === status }).length === 0 ?\r\n      '' :\r\n      curRecord.filter((x) => { return x.date === SelectDate && x.status === status });\r\n    //console.log(arr);\r\n    return arr;\r\n  }\r\n\r\n  const dateCellRender = (value) => {\r\n    const eachDate = value.format('YYYY-MM-DD');\r\n    return (\r\n      <>\r\n        <Text type=\"danger\" strong={true}>\r\n          {curRecord.filter((x) => { return x.date === eachDate }).length === 0 ? '' : \"??��??: \"}\r\n        </Text>\r\n        <Text type=\"danger\" strong={true}>\r\n          {curRecord.filter((x) => { return x.date === eachDate }).length === 0 ?\r\n            '' : curRecord.filter((x) => { return (x.date === eachDate && x.status === \"??��??\") }).reduce((sum, item) =>\r\n              sum + item.cost, 0)\r\n          }\r\n        </Text>\r\n        <br></br>\r\n        <Text type=\"success\" strong={true}>\r\n          {curRecord.filter((x) => { return x.date === eachDate }).length === 0 ? '' : \"??��??: \"}\r\n        </Text>\r\n        <Text type=\"success\" strong={true}>\r\n          {curRecord.filter((x) => { return x.date === eachDate }).length === 0 ?\r\n            '' : curRecord.filter((x) => { return (x.date === eachDate && x.status === \"??��??\") }).reduce((sum, item) =>\r\n              sum + item.cost, 0)\r\n          }\r\n        </Text>\r\n      </>\r\n    )\r\n  };\r\n\r\n  const monthCellRender = (value) => {\r\n    const eachMonth = value.format(\"YYYY-MM\");\r\n    return (\r\n      <>\r\n        <Text type=\"danger\" strong={true}>\r\n          {curRecord.filter((x) => { return x.date_YM === eachMonth }).length === 0 ? '' : \"??��??: \"}\r\n        </Text>\r\n        <Text type=\"danger\" strong={true}>\r\n          {curRecord.filter((x) => { return x.date_YM === eachMonth }).length === 0 ?\r\n            '' : curRecord.filter((x) => { return (x.date_YM === eachMonth && x.status === \"??��??\") }).reduce((sum, item) =>\r\n              sum + item.cost, 0)\r\n          }\r\n        </Text>\r\n        <br></br>\r\n        <Text type=\"success\" strong={true}>\r\n          {curRecord.filter((x) => { return x.date_YM === eachMonth }).length === 0 ? '' : \"??��??: \"}\r\n        </Text>\r\n        <Text type=\"success\" strong={true}>\r\n          {curRecord.filter((x) => { return x.date_YM === eachMonth }).length === 0 ?\r\n            '' : curRecord.filter((x) => { return (x.date_YM === eachMonth && x.status === \"??��??\") }).reduce((sum, item) =>\r\n              sum + item.cost, 0)\r\n          }\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const Model = () => {\r\n    return (\r\n      <>\r\n        <Modal\r\n          title={SelectDate}\r\n          visible={ModalVisible}\r\n          onOk={handleOk}\r\n          onCancel={handleCancel}\r\n        >\r\n          <Tabs defaultActiveKey=\"??��??\" centered >\r\n            <TabPane tab=\"??��??\" key=\"??��??\">\r\n              <Table dataSource={createTable(\"??��??\")} columns={columns} />\r\n            </TabPane>\r\n            <TabPane tab=\"??��??\" key=\"??��??\">\r\n              <Table dataSource={createTable(\"??��??\")} columns={columns} />\r\n            </TabPane>\r\n          </Tabs>\r\n        </Modal>\r\n      </>\r\n    )\r\n  }\r\n  const [loading, setLoading] = useState(true)\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      await new Promise((r) => setTimeout(r, 1000))\r\n      setLoading((loading) => !loading)\r\n    }\r\n    loadData()\r\n  }, [])\r\n  return loading ? (\r\n    <div style={{ position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" }}>\r\n      <RingLoader color=\"#971d1d\" css={override} size={100} />\r\n    </div>) : (\r\n    <>\r\n      <Calendar\r\n        onPanelChange={onPanelChange}\r\n        dateCellRender={dateCellRender}\r\n        monthCellRender={monthCellRender}\r\n        onSelect={showModal}\r\n      />\r\n      {ModalVisible ? Model() : ''}\r\n    </>\r\n\r\n  );\r\n}\r\nexport default MyCalendar;\r\n","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Sign_in.js",["75"],"import React from 'react';\r\nimport '../Css/Sign_in.css';\r\nimport { Form, Input, Button, Checkbox, Modal, message } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { Layout } from 'antd';\r\nimport { useState,useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from '../axios.js'\r\n\r\nconst NormalLoginForm = ({ login2 ,Login, password, username, confirmpassword, setConfirmpassword, setPassword, setUsername }) => {\r\n    console.log(login2);\r\n    let navigate = useNavigate();\r\n    const onFinish = values => {\r\n    };\r\n    const login = async () => {\r\n        const {\r\n            data: { Message, status },\r\n        } = await axios.get('/api/Check', {\r\n            params: {\r\n                username,\r\n                password\r\n            },\r\n        });\r\n        if (status) {\r\n            message.success({\r\n                content: Message\r\n            })\r\n            Login(\"true\");\r\n            setPassword(\"\");\r\n            setConfirmpassword(\"\")\r\n            navigate('/calendar')\r\n        }\r\n        else {\r\n            message.error({\r\n                content: Message\r\n            })\r\n        }\r\n    }\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n    const handleOk = async () => {\r\n        if (password !== \"\" && username !== \"\" && confirmpassword !== \"\") {\r\n            if (password === confirmpassword) {\r\n                const {\r\n                    data: { Message, status },\r\n                } = await axios.post('/api/Register', {\r\n                    username,\r\n                    password\r\n                });\r\n                if (status) {\r\n                    setPassword(\"\");\r\n                    setUsername(\"\");\r\n                    setConfirmpassword(\"\");\r\n                    message.success({\r\n                        content: Message\r\n                    })\r\n                    setIsModalVisible(false);\r\n                    window.location.reload(true)\r\n                }\r\n                else {\r\n                    message.error({\r\n                        content: Message\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                message.error({\r\n                    content: 'Confirmed Passowrd is not same!'\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            message.error({\r\n                content: 'Username or Password or ConfirmPassword is empty'\r\n            })\r\n        }\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        setPassword(\"\");\r\n        setUsername(\"\");\r\n        setConfirmpassword(\"\");\r\n        window.location.reload(true);\r\n    };\r\n    return (\r\n        <div className='back'>\r\n        <Layout style={{height:\"100%\"}}>\r\n            <div className='bg'>\r\n            <h1>Moose the Record</h1>\r\n            <div className='space'>\r\n                <div>\r\n                    <h1 className='title'>\r\n                        Log in\r\n                    </h1>\r\n                    <Form\r\n                        name=\"normal_login\"\r\n                        className=\"login-form\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"username\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please input your Username!',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" onChange={(e) => { setUsername((prev) => prev =  e.target.value) }} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"password\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please input your Password!',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                onChange={(e) => { setPassword((prev)=> prev = e.target.value) }}\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                                <Checkbox style={{ color: \"azure\" }}>Remember me</Checkbox>\r\n                            </Form.Item>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" onClick={login} style={{ color: \"black\", background: \"white\", borderColor: \"black\", borderRadius: \"10px\", }} >\r\n                                Log in\r\n                            </Button>\r\n                            Or <Button className='register' type=\"primary\" style={{ color: \"black\", background: \"white\", borderRadius: \"10px\" }} onClick={showModal}> register Now!</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                    <Modal title=\"Register\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <Form  onFinish={onFinish}>\r\n                            <Form.Item\r\n                                name=\"username\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your Username!',\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input value={username} placeholder='Username' prefix={<UserOutlined className='registerinput' />} onChange={(e) => { setUsername((prev)=>prev = e.target.value) }}></Input>\r\n                            </Form.Item>\r\n                            <br />\r\n                            <Form.Item\r\n                                name=\"password\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your Password!',\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input\r\n                                    value={password}\r\n                                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    onChange={(e) => { setPassword((prev)=>prev = e.target.value) }}\r\n                                />\r\n                            </Form.Item>\r\n                            <br />\r\n                            <Form.Item\r\n                                name=\"confirm password\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your Password again!',\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input\r\n                                    value={confirmpassword}\r\n                                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                    type=\"password\"\r\n                                    placeholder=\"Confirm your Password\"\r\n                                    onChange={(e) => { setConfirmpassword((prev)=> prev = e.target.value) }}\r\n                                />\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </Layout>\r\n        </div>\r\n    );\r\n};\r\nexport default NormalLoginForm;","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\PieChart.js",["76","77","78","79","80","81"],"import Chart from 'react-apexcharts'\r\nimport React from 'react';\r\nimport { Tabs, Button, Space, Input, Typography, message, DatePicker } from 'antd';\r\nimport moment from \"moment\";\r\nimport '../Css/PieGraph.css'\r\nimport axios from '../axios.js'\r\nimport { useState, useEffect } from 'react';\r\nimport RingLoader from 'react-spinners/RingLoader.js'\r\nimport { css } from \"@emotion/react\";\r\nconst { TabPane } = Tabs;\r\nconst { Search } = Input;\r\nconst { Title } = Typography;\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: -20%;\r\n  border-color: #971d1d;\r\n`;\r\nconst Graph = ({ username }) => {\r\n    const [Date, setDate] = useState(moment())\r\n    const [labels, setLabels] = useState([]);\r\n    const [series, setSeries] = useState([]);\r\n    const [status, setStatus] = useState(\"??��??\");\r\n    const [loading2, setLoading2] = useState(false);\r\n    const getdata = async () => {\r\n        const YM = Date.format(\"YYYY-MM\")\r\n        const { data: { NewRecords } } = await axios.get('/api/GetPieInformation', { // get backend\r\n            params: {\r\n                username, // give backend\r\n                YM,\r\n                status\r\n            },\r\n        })\r\n        //console.log(YM);\r\n        return NewRecords;\r\n    }\r\n    const HandleChange = async () => {\r\n        setLoading2((loading) => !loading)\r\n        setLabels([]);\r\n        setSeries([]);\r\n        let position = {};\r\n        let templabels = new Set();\r\n        let tempseries = [];\r\n\r\n        const NewRecords = await getdata();\r\n        console.log(NewRecords)\r\n        for (let i = 0; i < NewRecords.length; i++) {\r\n            let Type = NewRecords[i].type\r\n            let cost = NewRecords[i].cost\r\n            if (!templabels.has(Type)) {\r\n                templabels.add(Type);\r\n                position.Type = templabels.size - 1;\r\n                tempseries.push(cost);\r\n            }\r\n            else {\r\n                tempseries = tempseries.map((item, index) => {\r\n                    if (index === position.Type) return item += cost\r\n                    else return item\r\n                })\r\n            }\r\n        }\r\n        setLabels(Array.from(templabels));\r\n        setSeries(tempseries)\r\n        setLoading2((loading) => !loading)\r\n    }\r\n    useEffect(() => {\r\n        HandleChange();\r\n        //console.log(loading2);\r\n    }, [status, Date])\r\n    var options = {\r\n        chart: {\r\n            animation: {\r\n                enabled: true,\r\n                speed: 100,\r\n                animateGradually: {\r\n                    enabled: true,\r\n                    delay: 500\r\n                },\r\n            }\r\n        },\r\n        noData: {\r\n            text: \" There is no record in this Month\",\r\n            align: 'center',\r\n            verticalAlign: 'middle',\r\n            offsetX: 0,\r\n            offsetY: -200,\r\n            style: {\r\n                color: \"red\",\r\n                fontSize: '30px',\r\n                fontFamily: \"sans-serif\"\r\n            }\r\n        },\r\n        legend: {\r\n            position: 'bottom',\r\n            fontSize: \"20%\"\r\n        },\r\n        labels: labels\r\n    };\r\n\r\n    return loading2 ? (\r\n        <div style={{ position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" }}>\r\n            <RingLoader color=\"#971d1d\" css={override} size={100} />\r\n        </div>) : (\r\n        <Tabs defaultActiveKey={status} centered onTabClick={(key) => setStatus(key)}>\r\n            <TabPane tab=\"??��??\" key=\"??��??\">\r\n                <DatePicker size=\"large\" value={Date} picker=\"month\" onChange={(date) => { setDate(date) }} allowClear={false} />\r\n                <div className='pie'>\r\n                    {/*<Button  type='primary' onClick={()=>{HandleChange()}}> 確�?? </Button>*/}\r\n                    <Chart options={options} type=\"pie\" series={series} width=\"500\" height='1000' />\r\n                </div>\r\n            </TabPane>\r\n            <TabPane tab=\"??��??\" key=\"??��??\">\r\n                <DatePicker size=\"large\" value={Date} picker=\"month\" onChange={(date) => { setDate(date) }} allowClear={false} />\r\n                <div className='pie'>\r\n                    {/*<Button  type='primary' onClick={()=>{HandleChange()}}> 確�?? </Button>*/}\r\n                    <Chart options={options} type='pie' series={series} width=\"500\" height='1000' />\r\n                </div>\r\n            </TabPane>\r\n        </Tabs>\r\n    )\r\n}\r\nexport default Graph","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Property.js",["82","83","84","85","86","87","88","89","90","91","92","93"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport { Tabs, Button, Space, Input, Typography, message, DatePicker, Modal } from 'antd';\r\nimport axios from '../axios.js'\r\nimport moment from \"moment\";\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nconst Property = ({ username }) => {\r\n\r\n    const [TotalIncome, setTotalIncome] = useState(0);\r\n    const [TotalOutcome, setTotalOutcome] = useState(0);\r\n    const [TotalMonth, setTotalMonth] = useState(0);\r\n    const [Record, setRecord] = useState([]);\r\n    const Date = moment();\r\n    const date = Date.format('YYYY-MM');\r\n\r\n    const getData = async () => {\r\n        const { data: { records } } = await axios.get('/api/GetUserInformation', { // get backend\r\n            params: {\r\n                username, // give backend\r\n            },\r\n        });\r\n        setRecord(records);\r\n    }\r\n    const handleCalculate = () => {\r\n        let tempIncome = 0;\r\n        let tempOutcome = 0;\r\n        let tempMonth = 0;\r\n        for (let i = 0; i < Record.length; i++) {\r\n            let Status = Record[i].status;\r\n            let cost = Record[i].cost;\r\n            if (Status === \"支出\") {\r\n                tempOutcome += cost;\r\n                if (Record[i].date_YM === date)\r\n                    tempMonth -= cost;\r\n            }\r\n            else if (Status === \"收入\") {\r\n                tempIncome += cost;\r\n                if (Record[i].date_YM === date)\r\n                    tempMonth += cost;\r\n            }\r\n        }\r\n        setTotalIncome(tempIncome);\r\n        setTotalOutcome(tempOutcome);\r\n        setTotalMonth(tempMonth);\r\n    }\r\n    const handleColor = (cost) => {\r\n        if (cost < 0)\r\n            return \"danger\";\r\n        else if (cost > 0)\r\n            return \"success\";\r\n    }\r\n    useEffect(() => {\r\n        getData();\r\n    }, [])\r\n    console.log(Record);\r\n\r\n    useEffect(() => {\r\n        handleCalculate();\r\n    }, [Record])\r\n    return (\r\n        <>\r\n            <div style={{ marginTop: '15%' }}></div>\r\n            <Title level={2} type={handleColor(TotalIncome - TotalOutcome)}>${TotalIncome - TotalOutcome}</Title>\r\n            <Title level={2} style={{ marginTop: \"1%\", marginBottom: \"5%\" }}>淨資產</Title>\r\n            <Space size={[100, 20]} wrap align='center'>\r\n                <div>\r\n                    <div>\r\n                        <Title level={2} type='danger'>-${TotalOutcome}</Title>\r\n                    </div>\r\n                    <Title level={2}>總支出</Title>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <Title level={2} type='success'>${TotalIncome}</Title>\r\n                    </div>\r\n                    <Title level={2}>總收入</Title>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <Title level={2} type={handleColor(TotalMonth)}>${TotalMonth}</Title>\r\n                    </div>\r\n                    <Title level={2}>本月收支</Title>\r\n                </div>\r\n            </Space>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Property;","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Budget.js",["94","95","96","97","98","99","100","101","102","103","104","105"],"import React, { useState, useEffect } from 'react';\r\nimport { DatePicker, Input } from 'antd';\r\nimport moment from \"moment\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport axios from '../axios.js'\r\n\r\nconst options = {\r\n    chart: { toolbar: { show: true }},\r\n    plotOptions: {\r\n      radialBar: {\r\n        startAngle: -135,\r\n        endAngle: 225,\r\n         hollow: { \r\n           margin: 0, size: '70%', background: '#fff', image: undefined, \r\n           imageOffsetX: 0, imageOffsetY: 0, position: 'front',\r\n           dropShadow: { enabled: true, top: 3, left: 0, blur: 4, opacity: 0.24 }\r\n        },\r\n        track: {\r\n          background: '#fff',\r\n          strokeWidth: '67%',\r\n          margin: 0, // margin is in pixels\r\n          dropShadow: { enabled: true, top: -3, left: 0, blur: 4, opacity: 0.35 }\r\n        },\r\n        dataLabels: {\r\n          show: true,\r\n          name: { offsetY: -10, show: true, color: '#888', fontSize: '17px'},\r\n          value: {\r\n            formatter: function(val) {\r\n              return parseInt(val);\r\n            },\r\n            color: '#111',\r\n            fontSize: '36px',\r\n            show: true,\r\n          }\r\n        }\r\n      }\r\n    },\r\n    fill: {\r\n      type: 'gradient',\r\n      gradient: {\r\n        shade: 'dark',\r\n        type: 'horizontal',\r\n        shadeIntensity: 0.5,\r\n        gradientToColors: ['#ABE5A1'],\r\n        inverseColors: true,\r\n        opacityFrom: 1,\r\n        opacityTo: 1,\r\n        stops: [0, 100]\r\n      }\r\n    },\r\n    stroke: {\r\n      lineCap: 'round'\r\n    },\r\n    labels: ['Percent'],\r\n};\r\n\r\nconst Budget = ({ username }) => {\r\n  const [Date, setDate] = useState(moment());\r\n  const [labels,setLabels] = useState([]);\r\n  const [type1, setType1] = useState(-1);\r\n  const [BudgetData, setBudgetData] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [bud, setBud] = useState(100000000);\r\n  //const [series,setSeries] = useState([]);\r\n  const series = [[total / 100],];\r\n  \r\n  const Get_data = async () => {\r\n    const YM =  Date.format(\"YYYY-MM\")\r\n    const { data: { NewRecords } } = await axios.get('/api/GetBudgetInformation', {\r\n        params: {\r\n          username,\r\n          YM,\r\n        },\r\n      });\r\n      return NewRecords;\r\n  }\r\n  \r\n  const types = async () => {\r\n      let position = {};\r\n      let tempTypes = new Set();\r\n      let tempseries = [];\r\n      let count = 0;\r\n      const spent = await Get_data();\r\n      for (let i = 0; i < spent.length; i++){\r\n        count += spent[i].cost;\r\n        // let Type = spent[i].type;\r\n        // console.log(Type);\r\n        // let cost = BudgetData[i].cost\r\n        // if (!tempTypes.has(Type)){\r\n        //     tempTypes.add(Type);\r\n        //     position.Type = tempTypes.size - 1;\r\n        //     tempseries.push(cost);\r\n        // }\r\n    }\r\n    setTotal(count);\r\n    console.log(total);\r\n    //setBudgetData(Array.from(tempTypes));\r\n  }\r\n\r\n  useEffect(()=>{\r\n      types();\r\n    },[Date]);\r\n  /*const HandleChange = async ()=>{\r\n    setLabels([]);\r\n    //setSeries([]);\r\n    let position = {};\r\n    let tempTypes = new Set();\r\n    let tempseries = [];\r\n    const BudgetData = await Get_data();\r\n    //console.log(BudgetData);\r\n    for(let i = 0;i < BudgetData.length;i++){   \r\n        let Type = BudgetData[i].type\r\n        let cost = BudgetData[i].cost\r\n        if(!tempTypes.has(Type)){\r\n            tempTypes.add(Type);\r\n            position.Type = tempTypes.size - 1;\r\n            tempseries.push(cost);\r\n        }\r\n        else{\r\n            tempseries = tempseries.map((item,index)=>{\r\n                if(index === position.Type) return item += cost\r\n                else return item\r\n            })\r\n        }\r\n    }\r\n    setLabels(Array.from(tempTypes));\r\n    setSeries([tempseries])\r\n  }*/\r\n\r\n  const changeValue = (e) => {\r\n    setBud(e.target.value);\r\n  }\r\n\r\n  const APexChart = () => {\r\n    \r\n    return (\r\n      <>\r\n      \r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DatePicker \r\n        size=\"large\" \r\n        defaultValue={Date} \r\n        picker=\"month\" \r\n        onChange={(date)=>\r\n          {setDate(date)}} \r\n        allowClear={false}\r\n      />\r\n      <Input \r\n      maxLength={25}\r\n      placeholder=\"Input your budget for this month\"\r\n      onChange={changeValue}\r\n      />\r\n      <ReactApexChart \r\n        options={options} \r\n        series={series}\r\n        type=\"radialBar\" \r\n        height={300} \r\n        width={300}\r\n      />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Budget;\r\n","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Containers\\Map\\Map.js",["106"],"import \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport MapGL, { NavigationControl, ScaleControl, GeolocateControl, LinearInterpolator } from \"react-map-gl\";\r\nimport Geocoder from \"react-map-gl-geocoder\";\r\nimport mapboxgl from \"mapbox-gl\"; // This is a dependency of react-map-gl even if you didn't explicitly install it\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker.js';\r\nimport { DatePicker } from 'antd';\r\nimport moment from \"moment\";\r\nimport axios from \"../../axios.js\"\r\nimport Pins from '../../Component/Pins.js'\r\nmapboxgl.workerClass = MapboxWorker;\r\n\r\n\r\nconst Map = ({username}) => {\r\n    const [Date,setDate] = useState(moment());\r\n    const [Data,setData] =useState([]);\r\n    const [viewport, setViewport] = useState({\r\n        latitude: 25.017754858333614,\r\n        longitude: 121.53968590135806,\r\n        zoom: 13\r\n    });\r\n    const mapRef = useRef();\r\n    const handleViewportChange = useCallback(\r\n        (newViewport) => setViewport(newViewport),\r\n        []\r\n    );\r\n    const MAPBOX_TOKEN =\r\n        \"pk.eyJ1IjoiZW5naW5la2V2aW4iLCJhIjoiY2t5ZXVqYXU1MGJjMDJvcG1tNmY3enEwcSJ9.6zVa7flOmlUMpCSKOmwvkA\";\r\n    const handleGeocoderViewportChange = useCallback(\r\n        (newViewport) => {\r\n            const geocoderDefaultOverrides = { transitionDuration: 2000 };\r\n\r\n            return handleViewportChange({\r\n                ...newViewport,\r\n                ...geocoderDefaultOverrides\r\n            });\r\n        },\r\n        [handleViewportChange]\r\n    );\r\n    if (\"geolocation\" in navigator) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            console.log(position.coords.latitude, position.coords.longitude);\r\n        });\r\n    }\r\n    const GetData = async ()=>{\r\n        const Y = Date.format(\"YYYY\")\r\n        const { data: { NewRecords } } = await axios.get('/api/QueryAddress', { // get backend\r\n            params: {\r\n                username, // give backend\r\n                date_Y:Y,\r\n                status:\"??��??\"\r\n            },\r\n        })\r\n        setData(NewRecords);\r\n    }\r\n    useEffect(()=>{\r\n        GetData()\r\n    },[Date])\r\n    return (\r\n        <div>\r\n            <DatePicker size=\"large\" value={Date} picker=\"year\" onChange={(date) => { setDate(date) }} allowClear={false} />\r\n            <div style={{ height: \"90vh\" }}>\r\n                <MapGL\r\n                    ref={mapRef}\r\n                    {...viewport}\r\n                    mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    onViewportChange={handleViewportChange}\r\n                    mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    transitionInterpolator={new LinearInterpolator()}\r\n                >   \r\n                    {console.log(Data)};\r\n                    {\r\n                    Data.map((info) => (\r\n                        <Pins info={info} />\r\n                    ))\r\n                    }          \r\n                    <Geocoder\r\n                        mapRef={mapRef}\r\n                        onViewportChange={handleGeocoderViewportChange}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                        position=\"top-left\"\r\n                        style={{ right: '50px', top: '10px' }}\r\n                    />\r\n                    {/* <div className=\"map-sidebar\" style={{left:'90px', bottom:'0px'}}>\r\n                        Longitude: {viewport.longitude} | Latitude: {viewport.latitude} | Zoom: {viewport.zoom}\r\n                    </div> */}\r\n                    <NavigationControl style={{ right: '10px', top: '10px' }} />\r\n                    <ScaleControl maxWidth={100} unit=\"metric\" style={{ right: '10px', bottom: '25px' }} />\r\n                    <GeolocateControl style={{ right: '10px', top: '120px' }} positionOptions={{ enableHighAccuracy: true }} trackUserLocation={false} />\r\n                </MapGL>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","C:\\vscode\\webfinalproject\\final\\final\\final\\src\\Component\\Pins.js",["107","108","109"],"import React, { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport {Marker} from 'react-map-gl';\r\nimport DialogActions from '@mui/material/DialogActions/index.js';\r\nimport DialogContent from '@mui/material/DialogContent/index.js';\r\nimport {Typography, Button, Dialog} from '@mui/material';\r\nimport DateRangeIcon from '@mui/icons-material/DateRange.js';\r\nimport PlaceIcon from '@mui/icons-material/Place.js';\r\nimport ArrowForwardOutlinedIcon from '@mui/icons-material/ArrowForwardOutlined.js';\r\nimport { makeStyles } from '@mui/styles';\r\nimport pinimg from './pinimg.png'\r\nimport Geocode from \"react-geocode\";\r\nimport { css } from \"@emotion/react\";\r\nimport RingLoader from 'react-spinners/RingLoader.js'\r\nconst SIZE=50\r\nconst useStyles = makeStyles(theme => ({\r\n  wrapIcon: {\r\n    verticalAlign: 'middle',\r\n    display: 'inline-flex'\r\n  },\r\n  customizeToolbar: {\r\n    minHeight: 40,\r\n    width: '100%', \r\n  }\r\n}));\r\n\r\nconst override = css`\r\n  display: flex;\r\n  border-color: #971d1d;\r\n`;\r\n    function Pins(props) {\r\n      const [coordinate,setCoordinate] = useState([]);\r\n      Geocode.setApiKey(\"AIzaSyD7vSdUKsQRZcZ6tfi7EPFXuiDWSWtLZ7A\");\r\n      Geocode.setLanguage(\"zh-TW\");\r\n      Geocode.setLocationType(\"ROOFTOP\");\r\n      Geocode.enableDebug();\r\n      const Getcoordinate = (address)=>{\r\n        Geocode.fromAddress(address).then(\r\n            (response) => {\r\n              const { lat, lng } = response.results[0].geometry.location;\r\n              let tempcoordinate = [];\r\n              tempcoordinate.push(lat);\r\n              tempcoordinate.push(lng);\r\n              setCoordinate(tempcoordinate)\r\n              console.log(coordinate)\r\n              console.log(tempcoordinate)\r\n            },\r\n            (error) => {\r\n              console.error(error);\r\n            }\r\n        );\r\n    }\r\n    const {info} = props;\r\n    console.log(info);\r\n    const [open, setOpen] = useState(false);\r\n    const classes = useStyles()\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    const [loading, setLoading] = useState(true)\r\n    useEffect(()=>{\r\n      const loadData = async () => {\r\n        await new Promise((r) => setTimeout(r, 2000))\r\n        setLoading((loading) => !loading)\r\n      }\r\n      Getcoordinate(info.address)\r\n      loadData()\r\n    },[])\r\n    return loading ? (\r\n      <div style={{ position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" }}>\r\n        <RingLoader color=\"#971d1d\" css={override} size={100} />\r\n      </div>) :(\r\n      <>\r\n        <Marker  longitude={coordinate[1]} latitude={coordinate[0]}>\r\n        <img \r\n          onClick={() => handleOpen(info.id)}\r\n          src={pinimg} height=\"40\" width=\"40\"\r\n          alt =\"\"\r\n          style={{\r\n          cursor: 'pointer',\r\n          fill: '#d00',\r\n          stroke: 'none',\r\n          transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\r\n        }}></img>\r\n        </Marker>\r\n\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" className={classes.wrapIcon}>\r\n            <PlaceIcon fontSize=\"small\" color=\"disabled\" style={{marginRight: \"6px\"}}/>\r\n            {info.type}\r\n          </Typography><br/>\r\n          <Typography variant=\"body2\" className={classes.wrapIcon}>\r\n            <DateRangeIcon fontSize=\"small\" color=\"disabled\" style={{marginRight: \"6px\"}}/>\r\n            {info.cost}\r\n          </Typography><br/>\r\n          <Typography variant=\"body2\" className={classes.wrapIcon}>\r\n            <ArrowForwardOutlinedIcon fontSize=\"small\" color=\"disabled\" style={{marginRight: \"6px\"}}/>\r\n            {info.address}\r\n          </Typography><br/>\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      </>\r\n    )\r\n}    \r\nexport default React.memo(Pins);",{"ruleId":"110","severity":1,"message":"111","line":1,"column":38,"nodeType":"112","messageId":"113","endLine":1,"endColumn":44},{"ruleId":"110","severity":1,"message":"114","line":11,"column":3,"nodeType":"112","messageId":"113","endLine":11,"endColumn":18},{"ruleId":"110","severity":1,"message":"115","line":15,"column":3,"nodeType":"112","messageId":"113","endLine":15,"endColumn":19},{"ruleId":"110","severity":1,"message":"116","line":19,"column":8,"nodeType":"112","messageId":"113","endLine":19,"endColumn":13},{"ruleId":"110","severity":1,"message":"117","line":20,"column":8,"nodeType":"112","messageId":"113","endLine":20,"endColumn":14},{"ruleId":"110","severity":1,"message":"118","line":22,"column":26,"nodeType":"112","messageId":"113","endLine":22,"endColumn":32},{"ruleId":"110","severity":1,"message":"119","line":24,"column":16,"nodeType":"112","messageId":"113","endLine":24,"endColumn":20},{"ruleId":"120","severity":1,"message":"121","line":47,"column":6,"nodeType":"122","endLine":47,"endColumn":13,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"124","line":1,"column":27,"nodeType":"112","messageId":"113","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"111","line":1,"column":38,"nodeType":"112","messageId":"113","endLine":1,"endColumn":44},{"ruleId":"110","severity":1,"message":"125","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":17},{"ruleId":"110","severity":1,"message":"126","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"110","severity":1,"message":"127","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":14},{"ruleId":"110","severity":1,"message":"128","line":8,"column":9,"nodeType":"112","messageId":"113","endLine":8,"endColumn":14},{"ruleId":"129","severity":1,"message":"130","line":40,"column":17,"nodeType":"131","endLine":40,"endColumn":41},{"ruleId":"120","severity":1,"message":"132","line":74,"column":6,"nodeType":"122","endLine":74,"endColumn":8,"suggestions":"133"},{"ruleId":"110","severity":1,"message":"124","line":6,"column":19,"nodeType":"112","messageId":"113","endLine":6,"endColumn":28},{"ruleId":"110","severity":1,"message":"126","line":3,"column":16,"nodeType":"112","messageId":"113","endLine":3,"endColumn":22},{"ruleId":"110","severity":1,"message":"134","line":3,"column":24,"nodeType":"112","messageId":"113","endLine":3,"endColumn":29},{"ruleId":"110","severity":1,"message":"135","line":3,"column":50,"nodeType":"112","messageId":"113","endLine":3,"endColumn":57},{"ruleId":"110","severity":1,"message":"136","line":11,"column":9,"nodeType":"112","messageId":"113","endLine":11,"endColumn":15},{"ruleId":"110","severity":1,"message":"128","line":12,"column":9,"nodeType":"112","messageId":"113","endLine":12,"endColumn":14},{"ruleId":"120","severity":1,"message":"137","line":69,"column":8,"nodeType":"122","endLine":69,"endColumn":22,"suggestions":"138"},{"ruleId":"110","severity":1,"message":"111","line":1,"column":38,"nodeType":"112","messageId":"113","endLine":1,"endColumn":44},{"ruleId":"110","severity":1,"message":"125","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":17},{"ruleId":"110","severity":1,"message":"139","line":2,"column":19,"nodeType":"112","messageId":"113","endLine":2,"endColumn":30},{"ruleId":"110","severity":1,"message":"140","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":14},{"ruleId":"110","severity":1,"message":"126","line":3,"column":16,"nodeType":"112","messageId":"113","endLine":3,"endColumn":22},{"ruleId":"110","severity":1,"message":"141","line":3,"column":31,"nodeType":"112","messageId":"113","endLine":3,"endColumn":36},{"ruleId":"110","severity":1,"message":"135","line":3,"column":50,"nodeType":"112","messageId":"113","endLine":3,"endColumn":57},{"ruleId":"110","severity":1,"message":"142","line":3,"column":59,"nodeType":"112","messageId":"113","endLine":3,"endColumn":69},{"ruleId":"110","severity":1,"message":"143","line":3,"column":71,"nodeType":"112","messageId":"113","endLine":3,"endColumn":76},{"ruleId":"110","severity":1,"message":"119","line":7,"column":16,"nodeType":"112","messageId":"113","endLine":7,"endColumn":20},{"ruleId":"120","severity":1,"message":"144","line":56,"column":8,"nodeType":"122","endLine":56,"endColumn":10,"suggestions":"145"},{"ruleId":"120","severity":1,"message":"146","line":61,"column":8,"nodeType":"122","endLine":61,"endColumn":16,"suggestions":"147"},{"ruleId":"110","severity":1,"message":"148","line":59,"column":10,"nodeType":"112","messageId":"113","endLine":59,"endColumn":16},{"ruleId":"110","severity":1,"message":"149","line":59,"column":17,"nodeType":"112","messageId":"113","endLine":59,"endColumn":26},{"ruleId":"110","severity":1,"message":"150","line":60,"column":10,"nodeType":"112","messageId":"113","endLine":60,"endColumn":15},{"ruleId":"110","severity":1,"message":"151","line":60,"column":17,"nodeType":"112","messageId":"113","endLine":60,"endColumn":25},{"ruleId":"110","severity":1,"message":"152","line":61,"column":10,"nodeType":"112","messageId":"113","endLine":61,"endColumn":20},{"ruleId":"110","severity":1,"message":"153","line":61,"column":22,"nodeType":"112","messageId":"113","endLine":61,"endColumn":35},{"ruleId":"110","severity":1,"message":"154","line":63,"column":10,"nodeType":"112","messageId":"113","endLine":63,"endColumn":13},{"ruleId":"110","severity":1,"message":"155","line":79,"column":11,"nodeType":"112","messageId":"113","endLine":79,"endColumn":19},{"ruleId":"110","severity":1,"message":"156","line":80,"column":11,"nodeType":"112","messageId":"113","endLine":80,"endColumn":20},{"ruleId":"110","severity":1,"message":"157","line":81,"column":11,"nodeType":"112","messageId":"113","endLine":81,"endColumn":21},{"ruleId":"120","severity":1,"message":"158","line":102,"column":7,"nodeType":"122","endLine":102,"endColumn":13,"suggestions":"159"},{"ruleId":"110","severity":1,"message":"160","line":134,"column":9,"nodeType":"112","messageId":"113","endLine":134,"endColumn":18},{"ruleId":"120","severity":1,"message":"161","line":60,"column":7,"nodeType":"122","endLine":60,"endColumn":13,"suggestions":"162"},{"ruleId":"110","severity":1,"message":"111","line":1,"column":27,"nodeType":"112","messageId":"113","endLine":1,"endColumn":33},{"ruleId":"110","severity":1,"message":"163","line":1,"column":35,"nodeType":"112","messageId":"113","endLine":1,"endColumn":46},{"ruleId":"120","severity":1,"message":"164","line":72,"column":7,"nodeType":"122","endLine":72,"endColumn":9,"suggestions":"165"},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'SettingOutlined' is defined but never used.","'ScheduleOutlined' is defined but never used.","'axios' is defined but never used.","'Budget' is defined but never used.","'Footer' is assigned a value but never used.","'Text' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setvalue'. Either include it or remove the dependency array.","ArrayExpression",["166"],"'useEffect' is defined but never used.","'NavLink' is defined but never used.","'Button' is defined but never used.","'moment' is defined but never used.","'Title' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'GetRecord'. Either include it or remove the dependency array.",["167"],"'Space' is defined but never used.","'message' is defined but never used.","'Search' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'HandleChange'. Either include it or remove the dependency array.",["168"],"'useNavigate' is defined but never used.","'Tabs' is defined but never used.","'Input' is defined but never used.","'DatePicker' is defined but never used.","'Modal' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["169"],"React Hook useEffect has a missing dependency: 'handleCalculate'. Either include it or remove the dependency array.",["170"],"'labels' is assigned a value but never used.","'setLabels' is assigned a value but never used.","'type1' is assigned a value but never used.","'setType1' is assigned a value but never used.","'BudgetData' is assigned a value but never used.","'setBudgetData' is assigned a value but never used.","'bud' is assigned a value but never used.","'position' is assigned a value but never used.","'tempTypes' is assigned a value but never used.","'tempseries' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'types'. Either include it or remove the dependency array.",["171"],"'APexChart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetData'. Either include it or remove the dependency array.",["172"],"'useCallback' is defined but never used.","React Hook useEffect has missing dependencies: 'Getcoordinate' and 'info.address'. Either include them or remove the dependency array.",["173"],{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [login, setvalue]",{"range":"190","text":"191"},"Update the dependencies array to be: [GetRecord]",{"range":"192","text":"193"},"Update the dependencies array to be: [status, Date, HandleChange]",{"range":"194","text":"195"},"Update the dependencies array to be: [getData]",{"range":"196","text":"197"},"Update the dependencies array to be: [Record, handleCalculate]",{"range":"198","text":"199"},"Update the dependencies array to be: [Date, types]",{"range":"200","text":"201"},"Update the dependencies array to be: [Date, GetData]",{"range":"202","text":"203"},"Update the dependencies array to be: [Getcoordinate, info.address]",{"range":"204","text":"205"},[1654,1661],"[login, setvalue]",[2079,2081],"[GetRecord]",[2316,2330],"[status, Date, HandleChange]",[1861,1863],"[getData]",[1952,1960],"[Record, handleCalculate]",[2945,2951],"[Date, types]",[2283,2289],"[Date, GetData]",[2354,2356],"[Getcoordinate, info.address]"]